// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Phone_Seller_AspNetCore6.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231216222851_firstInit")]
    partial class firstInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandID"), 1L, 1);

                    b.Property<string>("BrandCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BrandID");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandID = 1,
                            BrandCode = "APL",
                            BrandName = "Apple"
                        },
                        new
                        {
                            BrandID = 2,
                            BrandCode = "SMG",
                            BrandName = "Samsung"
                        },
                        new
                        {
                            BrandID = 3,
                            BrandCode = "HUA",
                            BrandName = "Huawei"
                        },
                        new
                        {
                            BrandID = 4,
                            BrandCode = "XOI",
                            BrandName = "Xiaomi"
                        });
                });

            modelBuilder.Entity("Entities.Models.CartLine", b =>
                {
                    b.Property<int>("CartLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartLineID"), 1L, 1);

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartLineID");

                    b.HasIndex("OrderId");

                    b.HasIndex("PhoneID");

                    b.ToTable("CartLine");
                });

            modelBuilder.Entity("Entities.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CustomUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("GiftWrap")
                        .HasColumnType("bit");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Shipped")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.Phone", b =>
                {
                    b.Property<int>("PhoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneID"), 1L, 1);

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("PhoneOldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PhoneOnSale")
                        .HasColumnType("bit");

                    b.Property<string>("PhonePhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PhonePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("PhoneRating")
                        .HasColumnType("float");

                    b.Property<int>("PhoneRatingCountUser")
                        .HasColumnType("int");

                    b.Property<string>("PhoneSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PhoneStar")
                        .HasColumnType("int");

                    b.Property<int>("PhoneStock")
                        .HasColumnType("int");

                    b.HasKey("PhoneID");

                    b.HasIndex("BrandID");

                    b.ToTable("Phones");

                    b.HasData(
                        new
                        {
                            PhoneID = 1,
                            BrandID = 1,
                            PhoneCode = "APL-I15",
                            PhoneDetail = "DYNAMIC ISLAND COMES TO IPHONE 15 ...",
                            PhoneIsActive = true,
                            PhoneName = "iPhone 15",
                            PhoneOldPrice = 0m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/iphone-15.png",
                            PhonePrice = 799m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "iphone-15",
                            PhoneStar = 0,
                            PhoneStock = 100
                        },
                        new
                        {
                            PhoneID = 2,
                            BrandID = 1,
                            PhoneCode = "APL-15P",
                            PhoneDetail = "FORGED IN TITANIUM — iPhone 15 Pro Max has a strong and light aerospace-grade titanium design...",
                            PhoneIsActive = true,
                            PhoneName = "iPhone 15 Pro",
                            PhoneOldPrice = 0m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/iphone-15-pro.png",
                            PhonePrice = 999m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "iphone-15-pro",
                            PhoneStar = 0,
                            PhoneStock = 50
                        },
                        new
                        {
                            PhoneID = 3,
                            BrandID = 1,
                            PhoneCode = "APL-I14",
                            PhoneDetail = "6.1-inch Super Retina XDR display2  • Advanced camera system for better photos in any light ...",
                            PhoneIsActive = true,
                            PhoneName = "iPhone 14",
                            PhoneOldPrice = 899m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/iphone-14.png",
                            PhonePrice = 699m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "iphone-14",
                            PhoneStar = 0,
                            PhoneStock = 80
                        },
                        new
                        {
                            PhoneID = 4,
                            BrandID = 1,
                            PhoneCode = "APL-14P",
                            PhoneDetail = "6.7-inch Super Retina XDR display1  • Advanced camera system for better photos in any light ...",
                            PhoneIsActive = true,
                            PhoneName = "iPhone 14 Plus",
                            PhoneOldPrice = 999m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/iphone-14-plus.png",
                            PhonePrice = 799m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "iphone-14-plus",
                            PhoneStar = 0,
                            PhoneStock = 200
                        },
                        new
                        {
                            PhoneID = 5,
                            BrandID = 1,
                            PhoneCode = "APL-ISE",
                            PhoneDetail = "4.7-inch Retina HD display1  • Advanced single-camera system with 12MP Wide camera; Smart HDR 4, Photographic Styles, Portrait mode and 4K video up to 60 fps ...",
                            PhoneIsActive = true,
                            PhoneName = "iPhone SE",
                            PhoneOldPrice = 669m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/iphone-se.png",
                            PhonePrice = 579m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "iphone-se",
                            PhoneStar = 0,
                            PhoneStock = 99
                        },
                        new
                        {
                            PhoneID = 6,
                            BrandID = 1,
                            PhoneCode = "APL-I13",
                            PhoneDetail = "6.1-inch Super Retina XDR display2  • Cinematic mode adds shallow depth of field and shifts focus automatically in your videos ...",
                            PhoneIsActive = true,
                            PhoneName = "iPhone 13",
                            PhoneOldPrice = 0m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/iphone-13.png",
                            PhonePrice = 899m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "iphone-13",
                            PhoneStar = 0,
                            PhoneStock = 10
                        },
                        new
                        {
                            PhoneID = 7,
                            BrandID = 2,
                            PhoneCode = "SMG-S23",
                            PhoneDetail = "Android 13  6.4\" Full HD+ Super AMOLED touchscreen  Triple 50 MP / 12 MP / 8 MP main cameras ...",
                            PhoneIsActive = true,
                            PhoneName = "SAMSUNG Galaxy S23 FE 5G - 128 GB, Purple",
                            PhoneOldPrice = 0m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/samsung-galaxy-s23-fe-5g---128-gb-purple.webp",
                            PhonePrice = 599m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "samsung-galaxy-s23-fe-5g---128-gb-purple",
                            PhoneStar = 0,
                            PhoneStock = 10
                        },
                        new
                        {
                            PhoneID = 8,
                            BrandID = 2,
                            PhoneCode = "SMG-A14",
                            PhoneDetail = "Android 13  6.6\" Full HD+ LCD touchscreen  Triple 50 MP / 5 MP / 2 MP main cameras ...",
                            PhoneIsActive = true,
                            PhoneName = "SAMSUNG Galaxy A14 - 64 GB, Black",
                            PhoneOldPrice = 0m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/samsung-galaxy-a14---64-gb-black.webp",
                            PhonePrice = 149m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "samsung-galaxy-a14---64-gb-black",
                            PhoneStar = 0,
                            PhoneStock = 20
                        },
                        new
                        {
                            PhoneID = 9,
                            BrandID = 2,
                            PhoneCode = "SMG-A34",
                            PhoneDetail = "Android 13  6.6\" Full HD+ Super AMOLED touchscreen  Triple 48 MP / 8 MP / 5 MP main cameras ...",
                            PhoneIsActive = true,
                            PhoneName = "SAMSUNG Galaxy A34 5G - 128 GB, Awesome Black",
                            PhoneOldPrice = 0m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/samsung-galaxy-a34-5g---128-gb-awesome-black.webp",
                            PhonePrice = 349m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "samsung-galaxy-a34-5g---128-gb-awesome-black",
                            PhoneStar = 0,
                            PhoneStock = 40
                        },
                        new
                        {
                            PhoneID = 10,
                            BrandID = 3,
                            PhoneCode = "HUA-20P",
                            PhoneDetail = "About this item Huawei 51092NWK Color: twilight",
                            PhoneIsActive = true,
                            PhoneName = "HUAWEI P20 Pro 128 GB/6 GB Single SIM Smartphone - Twilight (United Kingdom Version)",
                            PhoneOldPrice = 359m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/huawei-p20-pro-128-gb6-gb-single-sim-smartphone---twilight-united-kingdom-version.jpg",
                            PhonePrice = 149m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "huawei-p20-pro-128-gb6-gb-single-sim-smartphone---twilight-united-kingdom-version",
                            PhoneStar = 0,
                            PhoneStock = 5
                        },
                        new
                        {
                            PhoneID = 11,
                            BrandID = 4,
                            PhoneCode = "XOI-N12",
                            PhoneDetail = "About this item High resolution display: perfect readability in the sun, smooth scrolling, smooth videos and animations thanks to 120Hz refresh rate and 2400 x 1080 pixels Reliable performance: short response times even with complex applications, fast charging times and smooth gaming - possible with the built-in Snapdragon 685 High-resolution camera system: whether selfies with 13MP or with 50MP colourful photos and videos, the 50MP camera system allows high-resolution shots in any situation Long battery life: the 5000 mAh strong battery lasts all day and longer - the 33 W fast charging system allows for rapid charging of the Redmi mobile phone Handy design: the Redmi mobile phone combines high performance with a modern and slim design - height: 165.66 mm, width: 75.96 mm, depth: 7.85 mm, weight: 183.5 g",
                            PhoneIsActive = true,
                            PhoneName = "Xiaomi Redmi Note 12 Smartphone, 4+128GB, 6.67 Inch FHD+ AMOLED DotDisplay, 5,000 mAh, 50MP Camera",
                            PhoneOldPrice = 259m,
                            PhoneOnSale = true,
                            PhonePhotoUrl = "/img/xiaomi-redmi-note-12-smartphone-4128gb-667-inch-fhd-amoled-dotdisplay-5000-mah-50mp-camera.jpg",
                            PhonePrice = 149m,
                            PhoneRating = 0.0,
                            PhoneRatingCountUser = 0,
                            PhoneSlug = "xiaomi-redmi-note-12-smartphone-4128gb-667-inch-fhd-amoled-dotdisplay-5000-mah-50mp-camera",
                            PhoneStar = 0,
                            PhoneStock = 25
                        });
                });

            modelBuilder.Entity("Entities.Models.PhoneRating", b =>
                {
                    b.Property<int>("PhoneRatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneRatingId"), 1L, 1);

                    b.Property<bool>("IsRated")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneId")
                        .HasColumnType("int");

                    b.HasKey("PhoneRatingId");

                    b.ToTable("PhoneRatings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1be1f3dd-6ea1-4786-9431-cb0b2638aab8",
                            ConcurrencyStamp = "3ff1dc11-fb39-4c6b-9e20-96e8b8ee494a",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "56eb506e-3e10-4c6f-859a-7a0c10cc30cb",
                            ConcurrencyStamp = "7ab6d9a0-a1d7-4c71-bf9a-d4bcfcf94cda",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "9995ac20-50e7-41f5-bbf5-d6091df1a235",
                            ConcurrencyStamp = "2500a750-e3fb-4e59-b528-84cc8e4352c4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.CartLine", b =>
                {
                    b.HasOne("Entities.Models.Order", null)
                        .WithMany("Lines")
                        .HasForeignKey("OrderId");

                    b.HasOne("Entities.Models.Phone", "Phone")
                        .WithMany()
                        .HasForeignKey("PhoneID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Phone");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.HasOne("Entities.Models.CustomUser", "CustomUser")
                        .WithMany("Orders")
                        .HasForeignKey("CustomUserId");

                    b.Navigation("CustomUser");
                });

            modelBuilder.Entity("Entities.Models.Phone", b =>
                {
                    b.HasOne("Entities.Models.Brand", "Brand")
                        .WithMany("Phones")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Brand", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Entities.Models.CustomUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
